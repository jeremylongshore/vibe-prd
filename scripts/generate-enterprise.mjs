#!/usr/bin/env node
// Enterprise doc generator: copies all professional templates,
// injects a minimal header, replaces {{DATE}}, builds index + log.
// Usage: node scripts/generate-enterprise.mjs --project <name> [--out completed-docs] [--force]
import fs from 'fs';
import fsp from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function parseArgs(argv) {
  const args = { out: 'completed-docs', force: false };
  for (let i = 2; i < argv.length; i++) {
    const a = argv[i];
    if (a === '--project') args.project = argv[++i];
    else if (a === '--out') args.out = argv[++i];
    else if (a === '--force') args.force = true;
    else if (a === '--help' || a === '-h') args.help = true;
  }
  return args;
}

function usage() {
  console.log(`Usage:
  node scripts/generate-enterprise.mjs --project <name> [--out completed-docs] [--force]

Requires:
  - professional-templates/ (22 .md files)
  - completed-docs/<name>/enterprise-intake.md (from enterprise-cli.js)
Outputs:
  - completed-docs/<name>/*.md (22 docs)
  - completed-docs/<name>/index.md
  - completed-docs/<name>/.metadata/generation-log.json
`);
}

async function listTemplates() {
  const dir = path.join(process.cwd(), 'professional-templates');
  const entries = await fsp.readdir(dir, { withFileTypes: true });
  const files = entries.filter(e => e.isFile() && e.name.endsWith('.md')).map(e => e.name).sort();
  if (files.length === 0) throw new Error('No .md templates in professional-templates/');
  return files.map(name => ({ name, abs: path.join(dir, name) }));
}

async function readIntake(projectDir) {
  const intakePath = path.join(projectDir, 'enterprise-intake.md');
  const exists = fs.existsSync(intakePath);
  return { exists, intakePath, content: exists ? await fsp.readFile(intakePath, 'utf8') : '' };
}

function headerBlock(project, date) {
  return [
    `<!-- Autogenerated header (enterprise). Do not edit this block. -->`,
    `_Project:_ ${project}  `,
    `_Date:_ ${date}  `,
    `_Intake:_ See [enterprise-intake.md](./enterprise-intake.md)`,
    `---`,
    ``
  ].join('\n');
}

async function ensureDir(p) { await fsp.mkdir(p, { recursive: true }); }

async function main() {
  const args = parseArgs(process.argv);
  if (args.help || !args.project) { usage(); process.exit(args.help ? 0 : 1); }

  const date = new Date().toISOString().slice(0,10);
  const projectDir = path.join(process.cwd(), args.out, args.project);
  const metaDir = path.join(projectDir, '.metadata');
  const { exists: intakeExists, intakePath } = await readIntake(projectDir);
  if (!intakeExists) {
    console.error(`❌ Missing intake: ${intakePath}`);
    process.exit(2);
  }

  const templates = await listTemplates();
  await ensureDir(projectDir);
  await ensureDir(metaDir);

  const written = [];
  for (const t of templates) {
    const dst = path.join(projectDir, t.name);
    if (fs.existsSync(dst) && !args.force) {
      console.log(`↷ Skipping (exists): ${path.basename(dst)}  (use --force to overwrite)`);
      continue;
    }
    let body = await fsp.readFile(t.abs, 'utf8');
    body = body.replace(/{{DATE}}/g, date);
    const content = `${headerBlock(args.project, date)}${body}`;
    await fsp.writeFile(dst, content, 'utf8');
    written.push(path.basename(dst));
  }

  // index.md
  const indexPath = path.join(projectDir, 'index.md');
  const index = [
    `# ${args.project} — Enterprise Documentation Suite`,
    `**Generated:** ${date}`,
    ``,
    `## Contents`,
    ...written.map(w => `- [${w}](./${w})`),
    ``,
    `## Source`,
    `- Enterprise intake: [enterprise-intake.md](./enterprise-intake.md)`,
    ``,
  ].join('\n');
  await fsp.writeFile(indexPath, index, 'utf8');

  // log
  const logPath = path.join(metaDir, 'generation-log.json');
  const log = {
    project: args.project,
    date,
    templates: written,
    intake: path.relative(projectDir, intakePath),
    outDir: projectDir,
    version: 1
  };
  await fsp.writeFile(logPath, JSON.stringify(log, null, 2), 'utf8');

  console.log(`\n✅ Generated ${written.length} docs to ${path.relative(process.cwd(), projectDir)}`);
  console.log(`   - index: ${path.relative(process.cwd(), indexPath)}`);
  console.log(`   - log:   ${path.relative(process.cwd(), logPath)}`);
}
main().catch(err => { console.error('❌ Generator error:', err.message); process.exit(1); });
