/**
 * Professional Project Index and Metadata Generator
 * Creates comprehensive project organization and navigation
 */

const fs = require('fs').promises;
const path = require('path');

/**
 * Generate professional project index and metadata
 * @param {string} projectName - Name of the project
 * @param {Object} classification - Project classification result
 * @param {Array} templates - List of generated template files
 * @param {Object} userResponses - User's original responses
 * @param {string} outputDir - Output directory path
 */
async function generateIndex(projectName, classification, templates, userResponses, outputDir) {
    const projectDir = path.join(outputDir || `${process.env.HOME}/ai-dev/completed-docs`, projectName);
    const metadataDir = path.join(projectDir, '.metadata');

    // Ensure directories exist
    await fs.mkdir(metadataDir, { recursive: true });

    // Generate main index.md
    await generateMainIndex(projectDir, projectName, classification, templates);

    // Generate metadata files
    await generateGenerationLog(metadataDir, classification, templates);
    await generateAssumptionsMade(metadataDir, userResponses, classification);
    await generateClassificationAnalysis(metadataDir, classification);

    console.log(`‚úÖ Project organization complete: ${projectDir}`);
}

/**
 * Generate main index.md file
 */
async function generateMainIndex(projectDir, projectName, classification, templates) {
    const currentDate = new Date().toISOString().split('T')[0];
    const tierName = classification.complexity.toUpperCase();
    const templateCount = templates.length;

    const indexContent = `# ${projectName.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())} Documentation Suite

**Generated**: ${currentDate}
**Tier**: ${tierName} (${templateCount} documents)
**Classification**: ${classification.projectType} + ${classification.complexity}
**Industry**: ${classification.industry}

---

## üìã Generated Documents

${generateDocumentList(templates)}

---

## üéØ Project Classification Analysis

**Project Type**: ${classification.projectType === 'greenfield' ? 'üÜï Greenfield (New Project)' : 'üîß Brownfield (Existing System Enhancement)'}
**Complexity Tier**: ${getTierDescription(classification.complexity)}
**Industry Context**: ${getIndustryDescription(classification.industry)}
**Classification Confidence**: ${Math.round(classification.confidence * 100)}%

${classification.reasoning ? generateReasoningSection(classification.reasoning) : ''}

---

## üöÄ Recommended Next Steps

${generateNextSteps(classification, templateCount)}

---

## üìñ Document Navigation Guide

### üìã **Planning & Strategy**
${getStrategyDocs(templates).map(doc => `- [${getDocumentTitle(doc)}](./${doc})`).join('\n')}

### üõ†Ô∏è **Technical Implementation**
${getTechnicalDocs(templates).map(doc => `- [${getDocumentTitle(doc)}](./${doc})`).join('\n')}

### üë• **User Experience**
${getUserDocs(templates).map(doc => `- [${getDocumentTitle(doc)}](./${doc})`).join('\n')}

### üìä **Operations & Analytics**
${getOperationalDocs(templates).map(doc => `- [${getDocumentTitle(doc)}](./${doc})`).join('\n')}

---

## üîó Quick Links

- **Start Here**: [Product Requirements Document](./01_prd.md)
- **Implementation**: [Task Breakdown](./03_generate_tasks.md)
- **Project Overview**: [Project Brief](./14_project_brief.md)
${templateCount >= 12 ? '- **User Research**: [User Personas](./08_personas.md)' : ''}
${templateCount >= 12 ? '- **Technical Specs**: [Frontend Specification](./16_frontend_spec.md)' : ''}
${templateCount >= 22 ? '- **Operations**: [Operational Readiness](./19_operational_readiness.md)' : ''}

---

## üìù Customization Notes

Most documents include **[CUSTOMIZE]** sections that require your specific input:

1. **Review each document** for [CUSTOMIZE] markers
2. **Replace placeholders** with your specific details
3. **Update cross-references** if you rename or restructure documents
4. **Iterate and refine** as your project evolves

---

## üîÑ Regeneration

To update this documentation as your project evolves:

1. Run \`/new-project\` again in Claude Code CLI
2. Provide updated project details
3. Choose to enhance or replace existing documentation
4. All cross-references will be automatically updated

---

**Generated by vibe-prd AI Documentation Generator**
**Repository**: https://github.com/jeremylongshore/vibe-prd
**Documentation Suite**: ${templateCount} professional templates
`;

    await fs.writeFile(path.join(projectDir, 'index.md'), indexContent);
}

/**
 * Generate generation log metadata
 */
async function generateGenerationLog(metadataDir, classification, templates) {
    const currentDate = new Date().toISOString().split('T')[0];
    const currentTime = new Date().toLocaleTimeString();

    const logContent = `# Generation Log

**Date**: ${currentDate}
**Time**: ${currentTime}
**Generator**: vibe-prd AI Documentation Generator
**Version**: feature/new-project-command

## Classification Results

- **Project Type**: ${classification.projectType}
- **Complexity Tier**: ${classification.complexity}
- **Industry**: ${classification.industry}
- **Confidence Score**: ${Math.round(classification.confidence * 100)}%

## Templates Generated

Total Documents: **${templates.length}**

${templates.map((template, index) => `${index + 1}. ${template} - ${getDocumentTitle(template)}`).join('\n')}

## Processing Details

- **Template Source**: ~/ai-dev/professional-templates/
- **Date Replacement**: {{DATE}} ‚Üí ${currentDate}
- **Cross-References**: Automatically updated
- **Quality Validation**: ‚úÖ Complete

## System Information

- **Node.js Version**: ${process.version}
- **Platform**: ${process.platform}
- **Architecture**: ${process.arch}

---

*This log provides audit trail for documentation generation process.*
`;

    await fs.writeFile(path.join(metadataDir, 'generation-log.md'), logContent);
}

/**
 * Generate assumptions made during generation
 */
async function generateAssumptionsMade(metadataDir, userResponses, classification) {
    const assumptions = [];

    if (classification.confidence < 0.8) {
        assumptions.push("**Classification Confidence**: Classification confidence was below 80%, some assumptions were made about project type and complexity.");
    }

    if (classification.industry === 'general') {
        assumptions.push("**Industry Context**: No specific industry indicators detected, using general business templates.");
    }

    if (!userResponses || Object.keys(userResponses).length < 5) {
        assumptions.push("**Limited User Input**: Minimal project details provided, documents include placeholder content marked with [CUSTOMIZE].");
    }

    const assumptionsContent = `# Assumptions Made During Generation

This document tracks assumptions made by the AI system when generating your project documentation.

## Overview

${assumptions.length > 0 ?
    `The following assumptions were made due to limited or ambiguous input:\n\n${assumptions.map(assumption => `- ${assumption}`).join('\n\n')}` :
    'No significant assumptions were required. The AI had sufficient information to generate accurate, project-specific documentation.'}

## Customization Required

### High Priority
- Review all sections marked with **[CUSTOMIZE]**
- Verify project timelines and milestones
- Confirm technical requirements and constraints
- Validate user personas and target audience

### Medium Priority
- Update business model and revenue assumptions
- Refine feature priorities and scope
- Adjust compliance and regulatory requirements
- Review competitive analysis assumptions

### Low Priority
- Fine-tune writing style and tone
- Adjust document formatting preferences
- Update team roles and responsibilities
- Refine success metrics and KPIs

## Validation Checklist

- [ ] Project description accurately reflects your vision
- [ ] Technical requirements match your constraints
- [ ] User personas represent your target audience
- [ ] Business model aligns with your strategy
- [ ] Timeline and milestones are realistic
- [ ] Compliance requirements are complete
- [ ] Success metrics are measurable and relevant

---

*Review and customize these assumptions to ensure documentation accuracy.*
`;

    await fs.writeFile(path.join(metadataDir, 'assumptions-made.md'), assumptionsContent);
}

/**
 * Generate classification analysis
 */
async function generateClassificationAnalysis(metadataDir, classification) {
    const analysisContent = `# Classification Analysis

This document explains how the AI system classified your project and selected the appropriate documentation tier.

## Classification Results

### Project Type: ${classification.projectType.toUpperCase()}
${classification.projectType === 'greenfield' ?
    '**Greenfield projects** are new initiatives starting from scratch. They require foundational planning, market validation, and comprehensive strategy development.' :
    '**Brownfield projects** enhance or extend existing systems. They focus on integration planning, impact analysis, and stakeholder coordination.'}

### Complexity Tier: ${classification.complexity.toUpperCase()}
${getTierDescription(classification.complexity)}

### Industry Context: ${classification.industry.toUpperCase()}
${getIndustryDescription(classification.industry)}

## Detection Reasoning

${classification.reasoning ? Object.entries(classification.reasoning).map(([key, indicators]) =>
    `### ${key.charAt(0).toUpperCase() + key.slice(1)} Indicators
${indicators.length > 0 ? `Detected: ${indicators.join(', ')}` : 'No specific indicators found'}`
).join('\n\n') : 'No detailed reasoning available'}

## Confidence Analysis

**Overall Confidence**: ${Math.round(classification.confidence * 100)}%

${classification.confidence >= 0.8 ? '‚úÖ **High Confidence**: Clear indicators allowed accurate classification.' :
  classification.confidence >= 0.6 ? '‚ö†Ô∏è **Medium Confidence**: Some ambiguity in classification, review assumptions.' :
  '‚ùå **Low Confidence**: Limited information, significant assumptions made.'}

## Alternative Classifications

If this classification doesn't match your project, you can:

1. **Run /new-project again** with more detailed project description
2. **Manually select different tier** during next generation
3. **Customize generated documents** to match your specific needs

---

*This analysis helps ensure the generated documentation matches your project's actual requirements.*
`;

    await fs.writeFile(path.join(metadataDir, 'classification-analysis.md'), analysisContent);
}

/**
 * Helper functions for document organization
 */

function generateDocumentList(templates) {
    return templates.map((template, index) => {
        const title = getDocumentTitle(template);
        const description = getDocumentDescription(template);
        return `${index + 1}. **[${title}](./${template})** - ${description}`;
    }).join('\n');
}

function getDocumentTitle(filename) {
    const titles = {
        '01_prd.md': 'Product Requirements Document',
        '02_adr.md': 'Architecture Decision Record',
        '03_generate_tasks.md': 'Implementation Task Breakdown',
        '04_process_task_list.md': 'Task Processing & Management',
        '05_market_research.md': 'Market Research & Analysis',
        '06_architecture.md': 'System Architecture Documentation',
        '07_competitor_analysis.md': 'Competitive Analysis',
        '08_personas.md': 'User Personas & Profiles',
        '09_user_journeys.md': 'User Journey Mapping',
        '10_user_stories.md': 'User Story Templates',
        '11_acceptance_criteria.md': 'Acceptance Criteria Definition',
        '12_qa_gate.md': 'Quality Assurance Gates',
        '13_risk_register.md': 'Risk Management Registry',
        '14_project_brief.md': 'Project Brief & Charter',
        '15_brainstorming.md': 'Brainstorming & Ideation',
        '16_frontend_spec.md': 'Frontend Technical Specification',
        '17_test_plan.md': 'Testing Strategy & Plan',
        '18_release_plan.md': 'Release Planning & Strategy',
        '19_operational_readiness.md': 'Operational Readiness',
        '20_metrics_dashboard.md': 'Metrics & KPI Dashboard',
        '21_postmortem.md': 'Post-Mortem Analysis',
        '22_playtest_usability.md': 'Usability & Playtest Documentation'
    };
    return titles[filename] || filename;
}

function getDocumentDescription(filename) {
    const descriptions = {
        '01_prd.md': 'Core product vision, objectives, and requirements',
        '02_adr.md': 'Technical architecture decisions and rationale',
        '03_generate_tasks.md': 'Detailed implementation task breakdown',
        '04_process_task_list.md': 'Task management and workflow processes',
        '05_market_research.md': 'Market analysis and competitive landscape',
        '06_architecture.md': 'System architecture and technical design',
        '07_competitor_analysis.md': 'Competitive positioning and differentiation',
        '08_personas.md': 'Target user profiles and behavior patterns',
        '09_user_journeys.md': 'User experience flows and touchpoints',
        '10_user_stories.md': 'Feature requirements from user perspective',
        '11_acceptance_criteria.md': 'Definition of done for features',
        '12_qa_gate.md': 'Quality checkpoints and validation criteria',
        '13_risk_register.md': 'Project risks and mitigation strategies',
        '14_project_brief.md': 'Executive summary and project charter',
        '15_brainstorming.md': 'Creative ideation and concept exploration',
        '16_frontend_spec.md': 'Frontend technical requirements and design',
        '17_test_plan.md': 'Testing strategy and validation approach',
        '18_release_plan.md': 'Launch strategy and rollout plan',
        '19_operational_readiness.md': 'Production deployment and operations',
        '20_metrics_dashboard.md': 'Success metrics and KPI tracking',
        '21_postmortem.md': 'Post-launch analysis and lessons learned',
        '22_playtest_usability.md': 'User testing and usability validation'
    };
    return descriptions[filename] || 'Professional documentation template';
}

function getTierDescription(complexity) {
    switch (complexity) {
        case 'mvp':
            return '**MVP Tier** - Essential documents for rapid validation and lean development. Perfect for startups and personal projects.';
        case 'standard':
            return '**Standard Tier** - Comprehensive business documentation for established teams. Includes user research, technical specs, and stakeholder alignment.';
        case 'enterprise':
            return '**Enterprise Tier** - Complete professional documentation suite with compliance, operations, and audit-ready materials.';
        default:
            return 'Professional documentation tier';
    }
}

function getIndustryDescription(industry) {
    const descriptions = {
        fintech: 'Financial technology with regulatory compliance considerations',
        healthtech: 'Healthcare technology with HIPAA and medical device requirements',
        mobile: 'Mobile application development with app store considerations',
        ai: 'Artificial intelligence and machine learning technology',
        ecommerce: 'E-commerce and retail technology solutions',
        general: 'General business and technology applications'
    };
    return descriptions[industry] || 'General business context';
}

function generateNextSteps(classification, templateCount) {
    const steps = [
        '1. **Review Documentation**: Start with [Product Requirements Document](./01_prd.md) for project overview',
        '2. **Customize Placeholders**: Search for [CUSTOMIZE] markers and fill with your specific details',
        '3. **Validate Assumptions**: Check [.metadata/assumptions-made.md](.metadata/assumptions-made.md) for AI assumptions'
    ];

    if (classification.complexity === 'mvp') {
        steps.push('4. **Validate Core Concept**: Focus on user validation and market feedback');
        steps.push('5. **Plan Implementation**: Use [Task Breakdown](./03_generate_tasks.md) to start development');
    } else if (classification.complexity === 'standard') {
        steps.push('4. **Stakeholder Review**: Share [Project Brief](./14_project_brief.md) with key stakeholders');
        steps.push('5. **Technical Planning**: Review [Frontend Specification](./16_frontend_spec.md) with development team');
    } else {
        steps.push('4. **Compliance Review**: Validate regulatory requirements in enterprise documents');
        steps.push('5. **Operations Planning**: Review [Operational Readiness](./19_operational_readiness.md) with DevOps team');
    }

    steps.push('6. **Iterate Documentation**: Run `/new-project` again as requirements evolve');

    return steps.join('\n');
}

function generateReasoningSection(reasoning) {
    return `### Detection Details

${Object.entries(reasoning).map(([category, indicators]) =>
    `**${category.charAt(0).toUpperCase() + category.slice(1)}**: ${indicators.length > 0 ? indicators.join(', ') : 'No specific indicators'}`
).join('  \n')}`;
}

function getStrategyDocs(templates) {
    return templates.filter(t => ['01_prd.md', '14_project_brief.md', '05_market_research.md', '07_competitor_analysis.md', '13_risk_register.md'].includes(t));
}

function getTechnicalDocs(templates) {
    return templates.filter(t => ['02_adr.md', '06_architecture.md', '16_frontend_spec.md', '17_test_plan.md', '03_generate_tasks.md'].includes(t));
}

function getUserDocs(templates) {
    return templates.filter(t => ['08_personas.md', '09_user_journeys.md', '10_user_stories.md', '11_acceptance_criteria.md', '22_playtest_usability.md'].includes(t));
}

function getOperationalDocs(templates) {
    return templates.filter(t => ['18_release_plan.md', '19_operational_readiness.md', '20_metrics_dashboard.md', '21_postmortem.md', '12_qa_gate.md'].includes(t));
}

module.exports = generateIndex;