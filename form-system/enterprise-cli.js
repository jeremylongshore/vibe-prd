#!/usr/bin/env node
/* Enterprise intake CLI (TTY, file, or stdin). CommonJS for max compatibility. */
const fs = require('fs');
const path = require('path');
const readline = require('readline');
const yaml = require('js-yaml');

function parseArgs(argv) {
  const args = {};
  for (let i = 2; i < argv.length; i++) {
    const a = argv[i];
    if (a === '--project') args.project = argv[++i];
    else if (a === '--answers') args.answers = argv[++i];
    else if (a === '--out') args.out = argv[++i];
    else if (a === '--help' || a === '-h') args.help = true;
  }
  return args;
}

function usage() {
  console.log(`Usage:
  node form-system/enterprise-cli.js --project <name> [--answers <file>] [--out <dir>]

Sources of answers (priority):
  1) --answers <file>  (one line per answer)
  2) piped stdin       (echo 'a\nb\n...' | node ... )
  3) interactive TTY   (sequential prompts)

Output:
  <out>/<project>/enterprise-intake.md  (default out=completed-docs)
`);
}

function loadQuestions(file) {
  const raw = fs.readFileSync(file, 'utf8');
  const doc = yaml.load(raw);
  if (!doc || !Array.isArray(doc.questions) || doc.questions.length === 0) {
    throw new Error('Invalid questions YAML: missing questions[]');
  }
  return doc.questions;
}

function ensureDir(p) {
  fs.mkdirSync(p, { recursive: true });
}

function readAllFromStdin() {
  return new Promise((resolve, reject) => {
    let data = '';
    process.stdin.setEncoding('utf8');
    process.stdin.on('data', chunk => data += chunk);
    process.stdin.on('end', () => resolve(data));
    process.stdin.on('error', reject);
  });
}

function askInteractive(questions) {
  return new Promise((resolve, reject) => {
    const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
    const answers = [];
    let i = 0;

    const askNext = () => {
      if (i >= questions.length) {
        rl.close();
        return resolve(answers);
      }
      const q = questions[i].prompt || `Question ${i+1}`;
      rl.question(`\n(${i+1}/${questions.length}) ${q}\n> `, (ans) => {
        answers.push(ans?.trim() ?? '');
        i++;
        askNext();
      });
    };

    rl.on('SIGINT', () => { rl.close(); reject(new Error('Interrupted')); });
    rl.on('close', () => { /* normal close handled above */ });

    console.log(`\nEnterprise intake started. ${questions.length} questions. (Ctrl+C to abort)\n`);
    askNext();
  });
}

async function collectAnswers(questions, args) {
  // 1) file
  if (args.answers) {
    const lines = fs.readFileSync(args.answers, 'utf8').split(/\r?\n/);
    return questions.map((_, idx) => (lines[idx] ?? '').trim());
  }
  // 2) piped stdin
  if (!process.stdin.isTTY) {
    const data = await readAllFromStdin();
    const lines = data.split(/\r?\n/);
    return questions.map((_, idx) => (lines[idx] ?? '').trim());
  }
  // 3) interactive
  return await askInteractive(questions);
}

function composeMarkdown(project, questions, answers) {
  const date = new Date().toISOString().slice(0,10);
  let md = `# Enterprise Intake — ${project}\n**Date:** ${date}\n\n`;
  md += `> Summary of enterprise discovery responses. Use to drive comprehensive template generation.\n\n`;
  md += `## Responses\n`;
  questions.forEach((q, i) => {
    md += `### ${i+1}. ${q.prompt}\n`;
    md += `${answers[i] ? answers[i] : '_(no answer)_'}\n\n`;
  });
  md += `---\nGenerated by enterprise-cli.js\n`;
  return md;
}

(async function main() {
  try {
    const args = parseArgs(process.argv);
    if (args.help || !args.project) {
      usage(); process.exit(args.help ? 0 : 1);
    }
    const outRoot = args.out || 'completed-docs';
    const questionsPath = path.join('form-system', 'enterprise-questions.yaml');
    const questions = loadQuestions(questionsPath);

    const answers = await collectAnswers(questions, args);
    if (answers.length < questions.length) {
      // ensure array length matches questions length
      answers.length = questions.length;
    }

    const projectDir = path.join(outRoot, args.project);
    ensureDir(projectDir);
    const outFile = path.join(projectDir, 'enterprise-intake.md');
    const md = composeMarkdown(args.project, questions, answers);
    fs.writeFileSync(outFile, md, 'utf8');

    console.log(`\n✅ Wrote: ${outFile}`);
  } catch (err) {
    console.error(`\n❌ CLI error: ${err.message}`);
    process.exit(1);
  }
})();
